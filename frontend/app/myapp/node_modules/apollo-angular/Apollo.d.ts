import { NgZone } from '@angular/core';
import { ApolloClient, QueryOptions, MutationOptions, ApolloQueryResult, SubscriptionOptions, ApolloClientOptions } from 'apollo-client';
import { FetchResult } from 'apollo-link';
import { Observable } from 'rxjs';
import { QueryRef } from './QueryRef';
import { WatchQueryOptions, ExtraSubscriptionOptions, R, NamedOptions } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class ApolloBase<TCacheShape = any> {
    protected ngZone: NgZone;
    protected _client?: ApolloClient<TCacheShape>;
    constructor(ngZone: NgZone, _client?: ApolloClient<TCacheShape>);
    watchQuery<T, V = R>(options: WatchQueryOptions<V>): QueryRef<T, V>;
    query<T, V = R>(options: QueryOptions<V>): Observable<ApolloQueryResult<T>>;
    mutate<T, V = R>(options: MutationOptions<T, V>): Observable<FetchResult<T>>;
    subscribe<T, V = R>(options: SubscriptionOptions<V>, extra?: ExtraSubscriptionOptions): Observable<FetchResult<T>>;
    /**
     * Get an access to an instance of ApolloClient
     */
    getClient(): ApolloClient<TCacheShape>;
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     *
     * @param client ApolloClient instance
     */
    setClient(client: ApolloClient<TCacheShape>): void;
    private ensureClient;
    private checkInstance;
}
export declare class Apollo extends ApolloBase<any> {
    private _ngZone;
    private map;
    constructor(_ngZone: NgZone, apolloOptions?: ApolloClientOptions<any>, apolloNamedOptions?: NamedOptions);
    /**
     * Create an instance of ApolloClient
     * @param options Options required to create ApolloClient
     * @param name client's name
     */
    create<TCacheShape>(options: ApolloClientOptions<TCacheShape>, name?: string): void;
    /**
     * Use a default ApolloClient
     */
    default(): ApolloBase<any>;
    /**
     * Use a named ApolloClient
     * @param name client's name
     */
    use(name: string): ApolloBase<any>;
    /**
     * Create a default ApolloClient, same as `apollo.create(options)`
     * @param options ApolloClient's options
     */
    createDefault<TCacheShape>(options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Create a named ApolloClient, same as `apollo.create(options, name)`
     * @param name client's name
     * @param options ApolloClient's options
     */
    createNamed<TCacheShape>(name: string, options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Remember to clean up the store before removing a client
     * @param name client's name
     */
    removeClient(name?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Apollo>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Apollo>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBvbGxvLmQudHMiLCJzb3VyY2VzIjpbIkFwb2xsby5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeURBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcG9sbG9DbGllbnQsIFF1ZXJ5T3B0aW9ucywgTXV0YXRpb25PcHRpb25zLCBBcG9sbG9RdWVyeVJlc3VsdCwgU3Vic2NyaXB0aW9uT3B0aW9ucywgQXBvbGxvQ2xpZW50T3B0aW9ucyB9IGZyb20gJ2Fwb2xsby1jbGllbnQnO1xuaW1wb3J0IHsgRmV0Y2hSZXN1bHQgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBRdWVyeVJlZiB9IGZyb20gJy4vUXVlcnlSZWYnO1xuaW1wb3J0IHsgV2F0Y2hRdWVyeU9wdGlvbnMsIEV4dHJhU3Vic2NyaXB0aW9uT3B0aW9ucywgUiwgTmFtZWRPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBcG9sbG9CYXNlPFRDYWNoZVNoYXBlID0gYW55PiB7XG4gICAgcHJvdGVjdGVkIG5nWm9uZTogTmdab25lO1xuICAgIHByb3RlY3RlZCBfY2xpZW50PzogQXBvbGxvQ2xpZW50PFRDYWNoZVNoYXBlPjtcbiAgICBjb25zdHJ1Y3RvcihuZ1pvbmU6IE5nWm9uZSwgX2NsaWVudD86IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4pO1xuICAgIHdhdGNoUXVlcnk8VCwgViA9IFI+KG9wdGlvbnM6IFdhdGNoUXVlcnlPcHRpb25zPFY+KTogUXVlcnlSZWY8VCwgVj47XG4gICAgcXVlcnk8VCwgViA9IFI+KG9wdGlvbnM6IFF1ZXJ5T3B0aW9uczxWPik6IE9ic2VydmFibGU8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+O1xuICAgIG11dGF0ZTxULCBWID0gUj4ob3B0aW9uczogTXV0YXRpb25PcHRpb25zPFQsIFY+KTogT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdDxUPj47XG4gICAgc3Vic2NyaWJlPFQsIFYgPSBSPihvcHRpb25zOiBTdWJzY3JpcHRpb25PcHRpb25zPFY+LCBleHRyYT86IEV4dHJhU3Vic2NyaXB0aW9uT3B0aW9ucyk6IE9ic2VydmFibGU8RmV0Y2hSZXN1bHQ8VD4+O1xuICAgIC8qKlxuICAgICAqIEdldCBhbiBhY2Nlc3MgdG8gYW4gaW5zdGFuY2Ugb2YgQXBvbGxvQ2xpZW50XG4gICAgICovXG4gICAgZ2V0Q2xpZW50KCk6IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT47XG4gICAgLyoqXG4gICAgICogU2V0IGEgbmV3IGluc3RhbmNlIG9mIEFwb2xsb0NsaWVudFxuICAgICAqIFJlbWVtYmVyIHRvIGNsZWFuIHVwIHRoZSBzdG9yZSBiZWZvcmUgc2V0dGluZyBhIG5ldyBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2xpZW50IEFwb2xsb0NsaWVudCBpbnN0YW5jZVxuICAgICAqL1xuICAgIHNldENsaWVudChjbGllbnQ6IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4pOiB2b2lkO1xuICAgIHByaXZhdGUgZW5zdXJlQ2xpZW50O1xuICAgIHByaXZhdGUgY2hlY2tJbnN0YW5jZTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFwb2xsbyBleHRlbmRzIEFwb2xsb0Jhc2U8YW55PiB7XG4gICAgcHJpdmF0ZSBfbmdab25lO1xuICAgIHByaXZhdGUgbWFwO1xuICAgIGNvbnN0cnVjdG9yKF9uZ1pvbmU6IE5nWm9uZSwgYXBvbGxvT3B0aW9ucz86IEFwb2xsb0NsaWVudE9wdGlvbnM8YW55PiwgYXBvbGxvTmFtZWRPcHRpb25zPzogTmFtZWRPcHRpb25zKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXBvbGxvQ2xpZW50XG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyByZXF1aXJlZCB0byBjcmVhdGUgQXBvbGxvQ2xpZW50XG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZTxUQ2FjaGVTaGFwZT4ob3B0aW9uczogQXBvbGxvQ2xpZW50T3B0aW9uczxUQ2FjaGVTaGFwZT4sIG5hbWU/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVzZSBhIGRlZmF1bHQgQXBvbGxvQ2xpZW50XG4gICAgICovXG4gICAgZGVmYXVsdCgpOiBBcG9sbG9CYXNlPGFueT47XG4gICAgLyoqXG4gICAgICogVXNlIGEgbmFtZWQgQXBvbGxvQ2xpZW50XG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqL1xuICAgIHVzZShuYW1lOiBzdHJpbmcpOiBBcG9sbG9CYXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGVmYXVsdCBBcG9sbG9DbGllbnQsIHNhbWUgYXMgYGFwb2xsby5jcmVhdGUob3B0aW9ucylgXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQXBvbGxvQ2xpZW50J3Mgb3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZURlZmF1bHQ8VENhY2hlU2hhcGU+KG9wdGlvbnM6IEFwb2xsb0NsaWVudE9wdGlvbnM8VENhY2hlU2hhcGU+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuYW1lZCBBcG9sbG9DbGllbnQsIHNhbWUgYXMgYGFwb2xsby5jcmVhdGUob3B0aW9ucywgbmFtZSlgXG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFwb2xsb0NsaWVudCdzIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjcmVhdGVOYW1lZDxUQ2FjaGVTaGFwZT4obmFtZTogc3RyaW5nLCBvcHRpb25zOiBBcG9sbG9DbGllbnRPcHRpb25zPFRDYWNoZVNoYXBlPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtZW1iZXIgdG8gY2xlYW4gdXAgdGhlIHN0b3JlIGJlZm9yZSByZW1vdmluZyBhIGNsaWVudFxuICAgICAqIEBwYXJhbSBuYW1lIGNsaWVudCdzIG5hbWVcbiAgICAgKi9cbiAgICByZW1vdmVDbGllbnQobmFtZT86IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=