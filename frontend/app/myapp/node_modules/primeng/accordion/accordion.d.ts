import { ElementRef, AfterContentInit, OnDestroy, EventEmitter, QueryList, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { Header } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
export declare class AccordionTab implements OnDestroy {
    changeDetector: ChangeDetectorRef;
    header: string;
    disabled: boolean;
    cache: boolean;
    selectedChange: EventEmitter<any>;
    transitionOptions: string;
    headerFacet: QueryList<Header>;
    templates: QueryList<any>;
    private _selected;
    private _animating;
    selected: any;
    animating: boolean;
    contentTemplate: TemplateRef<any>;
    id: string;
    loaded: boolean;
    accordion: Accordion;
    constructor(accordion: any, changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    toggle(event: any): boolean;
    findTabIndex(): number;
    readonly hasHeaderFacet: boolean;
    onToggleDone(event: Event): void;
    onKeydown(event: KeyboardEvent): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AccordionTab>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AccordionTab, "p-accordionTab", never, {
    "cache": "cache";
    "transitionOptions": "transitionOptions";
    "selected": "selected";
    "header": "header";
    "disabled": "disabled";
}, {
    "selectedChange": "selectedChange";
}, ["headerFacet", "templates"]>;
}
export declare class Accordion implements BlockableUI, AfterContentInit, OnDestroy {
    el: ElementRef;
    changeDetector: ChangeDetectorRef;
    multiple: boolean;
    onClose: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    style: any;
    styleClass: string;
    expandIcon: string;
    collapseIcon: string;
    activeIndexChange: EventEmitter<any>;
    tabList: QueryList<AccordionTab>;
    tabListSubscription: Subscription;
    private _activeIndex;
    preventActiveIndexPropagation: boolean;
    tabs: AccordionTab[];
    constructor(el: ElementRef, changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    initTabs(): any;
    getBlockableElement(): HTMLElement;
    activeIndex: any;
    updateSelectionState(): void;
    updateActiveIndex(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Accordion>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Accordion, "p-accordion", never, {
    "expandIcon": "expandIcon";
    "collapseIcon": "collapseIcon";
    "activeIndex": "activeIndex";
    "multiple": "multiple";
    "style": "style";
    "styleClass": "styleClass";
}, {
    "onClose": "onClose";
    "onOpen": "onOpen";
    "activeIndexChange": "activeIndexChange";
}, ["tabList"]>;
}
export declare class AccordionModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AccordionModule, [typeof Accordion, typeof AccordionTab], [typeof ɵngcc1.CommonModule], [typeof Accordion, typeof AccordionTab, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AccordionModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmQudHMiLCJzb3VyY2VzIjpbImFjY29yZGlvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBCbG9ja2FibGVVSSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWNjb3JkaW9uVGFiIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgaGVhZGVyOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY2FjaGU6IGJvb2xlYW47XG4gICAgc2VsZWN0ZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgaGVhZGVyRmFjZXQ6IFF1ZXJ5TGlzdDxIZWFkZXI+O1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBfYW5pbWF0aW5nO1xuICAgIHNlbGVjdGVkOiBhbnk7XG4gICAgYW5pbWF0aW5nOiBib29sZWFuO1xuICAgIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxvYWRlZDogYm9vbGVhbjtcbiAgICBhY2NvcmRpb246IEFjY29yZGlvbjtcbiAgICBjb25zdHJ1Y3RvcihhY2NvcmRpb246IGFueSwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICB0b2dnbGUoZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgZmluZFRhYkluZGV4KCk6IG51bWJlcjtcbiAgICByZWFkb25seSBoYXNIZWFkZXJGYWNldDogYm9vbGVhbjtcbiAgICBvblRvZ2dsZURvbmUoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBY2NvcmRpb24gaW1wbGVtZW50cyBCbG9ja2FibGVVSSwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25PcGVuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBleHBhbmRJY29uOiBzdHJpbmc7XG4gICAgY29sbGFwc2VJY29uOiBzdHJpbmc7XG4gICAgYWN0aXZlSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRhYkxpc3Q6IFF1ZXJ5TGlzdDxBY2NvcmRpb25UYWI+O1xuICAgIHRhYkxpc3RTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIF9hY3RpdmVJbmRleDtcbiAgICBwcmV2ZW50QWN0aXZlSW5kZXhQcm9wYWdhdGlvbjogYm9vbGVhbjtcbiAgICB0YWJzOiBBY2NvcmRpb25UYWJbXTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBpbml0VGFicygpOiBhbnk7XG4gICAgZ2V0QmxvY2thYmxlRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBhY3RpdmVJbmRleDogYW55O1xuICAgIHVwZGF0ZVNlbGVjdGlvblN0YXRlKCk6IHZvaWQ7XG4gICAgdXBkYXRlQWN0aXZlSW5kZXgoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWNjb3JkaW9uTW9kdWxlIHtcbn1cbiJdfQ==